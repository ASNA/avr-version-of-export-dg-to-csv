Using System
Using System.Collections
Using System.Text

BegClass Program
    BegEnum ExitCode Access(*Public) 
        DclEnumFld Success Value(0) 
        DclEnumFld Failure Value(1) 
    EndEnum 

	BegFunc Main Type(*Integer4) Shared(*Yes) Access(*Public) Attributes(System.STAThread())
		DclSrParm args Type(*String) Rank(1)

        DclFld DatabaseName Type(*String) 
        DclFld LibraryName Type(*String) 
        DclFld FileName Type(*String) 
        DclFld IncludeHeading Type(*Boolean) 
        DclFld ShowProgress Type(*Boolean)
        DclFld TabDelimiter Type(*Boolean)
        DclFld WriteSchemaFile Type(*Boolean)
		DclFld Export Type(Exporter)
        DclFld ElapsedMilliseconds Type(*Integer4)  
        DclFld CurrentForeGroundColor Type(ConsoleColor) 

        CurrentForeGroundColor = Console.ForegroundColor

        If args.Length < 3 OR Array.IndexOf(args, '-help') > -1
            ShowHelp()
            LeaveSr ExitCode.Failure
        EndIf 

        IncludeHeading = Array.IndexOf(args, '-noheadings') = -1
        ShowProgress = Array.IndexOf(args, '-showprogress') > -1
        TabDelimiter = Array.IndexOf(args, '-tabdelimiter') > -1
        WriteSchemaFile = Array.IndexOf(args, '-writeschemafile') > -1

        DatabaseName = args[0]
        LibraryName = args[1]
        FileName = args[2]
        export = *New Exporter(DatabaseName, LibraryName, FileName, IncludeHeading, showProgress, TabDelimiter, WriteSchemaFile)

        Try
		    ElapsedMilliseconds = Export.Run()
            LeaveSr ExitCode.Success
        Catch ex Type(System.Exception)
            Console.ForegroundColor = ConsoleColor.Red
            Console.WriteLine(ex.Message) 
            Console.ForegroundColor = CurrentForeGroundColor
            LeaveSr ExitCode.Failure
        EndTry      

        Console.WriteLine('Time to export: {0:#,###}ms {1:#,##0}min', ElapsedMilliseconds, ElapsedMilliseconds / 60000)
        //Console.WriteLine('Press any key to continue...') 
		//Console.ReadKey()
	EndFunc 

    BegSr ShowHelp Shared(*Yes) 
        DclFld CurrentForeGroundColor Type(ConsoleColor) 

        CurrentForeGroundColor = Console.ForegroundColor
        Console.ForegroundColor = ConsoleColor.Green
        Console.WriteLine('Export a DataGate file to either a comma- or tab-separated file.')
        Console.WriteLine('')
        Console.WriteLine('Usage:')
        Console.WriteLine('   exporttocsv <databaseName> <library> <file> -noheadings -showprogress -tabdelimiter -writeschemafile')
        Console.WriteLine('')
        Console.WriteLine('Required arguments--must be provided in the order shown')
        Console.WriteLine('    <databaseName>....ASNA Database Name. If the name includes blanks surround it with double quotes.')
        Console.WriteLine('    <library>.........Library name.')
        Console.WriteLine('    <file>............File name.')
        Console.WriteLine('')
        Console.WriteLine('Optional arguments')
        Console.WriteLine('    -noheadings.......Do not include field names as first row.')
        Console.WriteLine('    -showprogress.....Show progress as records are exported.')
        Console.WriteLine('    -tabdelimiter.....Delimit field with a tab character instead of a comma.')
        Console.WriteLine('    -writeschemafile..Write schema file which shows column data types.')
        Console.WriteLine('')
        Console.WriteLine('Output file is written to the current user''s ''Document'' folder in the format:')
        Console.WriteLine('    <databaseName>-<library>-<file>.txt')
        Console.WriteLine('')
        Console.WriteLine('Schema file is written to the current user''s ''Document'' folder in the format:')
        Console.WriteLine('    <databaseName>-<library>-<file>.schema.txt')
        Console.ForegroundColor = CurrentForeGroundColor
    EndSr 

EndClass

BegClass Exporter Access(*Public) 
    DclConst TAB Value(U'0009') Access(*Public)   
    DclConst COMMA Value(',') 

 	DclDB DGDB 
    DclFld APIDGDB Type(ASNA.DataGate.Client.AdgConnection) 
    DclFld DatabaseName Type(*String) 
    DclFld LibraryName Type(*String) 
    DclFld FileName  Type(*String) 
    DclFld IncludeHeadingFlag Type(*Boolean) 
    DclFld ShowProgressFlag Type(*Boolean) 
    DclFld WriteSchemaFileFlag Type(*Boolean) 
    DclFld Delimiter Type(*String) 
    DclFld OriginalForeGroundColor Type(ConsoleColor) 

    DclFld dgh Type(DataGateHelper) WithEvents(*Yes) 
    
    DclFld outfileStream Type(System.IO.StreamWriter)
    DclFLd outputFileName Type(*String)
    DclFld outputSchemaFileName Type(*String) 

    BegConstructor Access(*Public) 
        DclSrParm DatabaseName Type(*String) 
        DclSrParm LibraryName Type(*String) 
        DclSrParm FileName  Type(*String)
        DclSrParm IncludeHeading Type(*Boolean) 
        DclSrParm ShowProgress Type(*Boolean) 
        DclSrParm TabDelimiter Type(*Boolean) 
        DclSrParm WriteSchemaFile Type(*Boolean) 
        
        *This.DatabaseName = DatabaseName 
        *This.LibraryName = LibraryName
        *This.FileName = FileName  
        *This.IncludeHeadingFlag = IncludeHeading
        *This.ShowProgressFlag = ShowProgress
        *This.WriteSchemaFileFlag = WriteSchemaFile

        *This.OriginalForegroundColor = Console.ForegroundColor

        If TabDelimiter 
            *This.Delimiter = TAB 
        Else
            *This.Delimiter = COMMA
        EndIf 

        DclFld DocumentPath Type(*String)
        DclFld LibraryNameForOutputFile Type(*String) 

        DocumentPath = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments)
        
        If LibraryName = '\' OR LibraryName = '/'
            LibraryNameForOutputFile = '#root'
        Else
            LibraryNameForOutputFile = LibraryName 
        EndIf 

        *This.OutputFileName = String.Format('{0}\{1}_{2}_{3}.txt', +
                                  DocumentPath, +
                                  NormalizeDatabaseName(*This.DatabaseName), +
                                  LibraryNameForOutputFile, +
                                  FileName)

        *This.OutputSchemaFileName = String.Format('{0}\{1}_{2}_{3}.schema.txt', +
                                     DocumentPath, +
                                     NormalizeDatabaseName(*This.DatabaseName), +
                                     LibraryNameForOutputFile, +
                                     FileName)

        outfileStream = *New System.IO.StreamWriter(*This.OutputFileName)
    EndConstructor 

    BegSr RestoreForegroundColor 
        Console.ForegroundColor = *This.OriginalForeGroundColor
    EndSr
    
	BegFunc Run Access(*Public) Type(*Integer4)  
        //APIDGDB = *New  ASNA.DataGate.Client.AdgConnection(*This.DatabaseName) 
        //APIDGDB.Open()
        DclFld TimeNow Type(DateTime) 

        DGDB.DBName = *This.DatabaseName 
        Connect DGDB 

        // Use one or the other. 
        // C# uses this one.
        //dgh = *New DataGateHelper(APIDGDB, 500)

        // AVR uses this one.
        *This.dgh = *New DataGateHelper(DGDB, 500)

        *This.dgh.ReadEntireFile(*This.LibraryName, *This.Filename) 
        *This.outfileStream.Close()
        *This.outfileStream.Dispose()

        TimeNow = DateTime.Now()

        Console.WriteLine(String.Format('Exported {0}/{1}/{2}', +
                    *This.DatabaseName, +
                    *This.LibraryName, +
                    *This.FileName))
        //Console.WriteLine(String.Format('{0} created on {1}.', *This.OutputFileName, TimeNow.ToString('f'))) 
        Console.WriteLine('{0} created on {1}.', *This.OutputFileName, TimeNow.ToString('f')) 
        Console.WriteLine('{0:#,000} rows written.', dgh.TotalRowsCounter)

        Disconnect DGDB
        //APIDGDB.Close()

        LeaveSr dgh.ReadMilliseconds    
	EndFunc 

    BegSr OnAfterRowRead Event(dgh.AfterRowRead) 
        DclSrParm Sender Type(*Object)
        DclSrParm e Type(AfterRowReadArgs) 

        // Properties passed in through the e parameter:
        //   e.DataRow -- a System.Data.DataRow representing the row read.
        //   e.FieldNames -- an array of field names in the DataRow.
        //   e.FieldTypes -- an array of field types in the DataRow.
        //   e.CurrentRowCounter -- The current row number. 
        //   e.TotalRowsCounter -- the total row numbers. 

        // You could do anything here you need with the incoming DataRow. 
        // In this case, we're just showing the values. 

        // Don't do console ouput if you are running AVR/API comparison tests.
        // Writing to console distorts the test timing. 

        DclFld ExportLine Type(StringBuilder) New()
        DclFld Counter Type(*Integer4) 

        // Create schema file and export headings. 
        If e.CurrentRowCounter = 1
            If *This.WriteSchemaFileFlag
                WriteSchemaFile(e.FieldNames, e.FieldTypes)
            EndIf 
            If *This.IncludeHeadingFlag
                ExportColumnHeadings(e.FieldNames)
            EndIf 
        EndIf 

        // Export row data. 
        ForEach FieldName Type(*String) Collection(e.FieldNames)
            If e.FieldTypes[Counter].ToLower() = 'string' 
                ExportLine.Append(String.Format('"{0}"{1}', e.DataRow[FieldName].ToString().Trim(), *This.Delimiter))
            Else
                ExportLine.Append(String.Format("{0}{1}", e.DataRow[FieldName].ToString(), *This.Delimiter))
            EndIf 
            Counter += 1
        EndFor 

        // Show Progress.             
        If *This.ShowProgressFlag AND Mod(e.CurrentRowCounter, 500) = 0 
            ShowProgress(e.CurrentRowCounter, e.TotalRowsCounter)
        EndIf

        // Remove last TAB.
        ExportLine = ExportLine.Remove(ExportLine.Length - 1, 1)
        *This.outfileStream.WriteLine(ExportLine) 
    EndSr

    BegSr ExportColumnHeadings
        DclSrParm FieldNames Type(*String) Rank(1) 

        DclFld ExportLine Type(StringBuilder) New()
        
        ForEach FieldName Type(*String) Collection(FieldNames)
            ExportLine.Append(String.Format('{0}{1}', FieldName, *This.Delimiter))
        EndFor         
        ExportLine = ExportLine.Remove(ExportLine.Length - 1, 1)
        *This.outfileStream.WriteLine(ExportLine)
    EndSr 

    BegSr ShowProgress
        DclSrParm CurrentRowCounter Type(*Integer4) 
        DclSrParm TotalRowsCounter Type(*Integer8) 

        DclFld CursorLeft Type(*Integer4) 
        DclFld CursorTop Type(*Integer4) 

        CursorLeft = Console.CursorLeft
        CursorTop = Console.CursorTop
        Console.WriteLine('{0} of {1}', CurrentRowCounter, TotalRowsCounter) 
        Console.CursorLeft = CursorLeft
        Console.CursorTop = CursorTop                        
    EndSr

    BegSr WriteSchemaFile
        DclSrParm FieldNames Type(*String) Rank(1) 
        DclSrParm FieldTypes Type(*String) Rank(1) 

        DclFld outfileStream Type(System.IO.StreamWriter)
        DclFld ColumnCounter Type(*Integer4) 
        
        outfileStream = *New System.IO.StreamWriter(*This.outputSchemaFileName)
        outfileStream.WriteLine('{0,-24}{1}', 'Column name', 'Data type') 
        outfileStream.WriteLine('{0,-24}{1}', '-----------', '---------') 
        ForEach FieldName Type(*String) Collection(FieldNames)
            outfileStream.WriteLine(String.Format('{0,-24}{1}', FieldName, FieldTypes[ColumnCounter]))
            ColumnCounter += 1 
        EndFor         

        outfileStream.Dispose()
    EndSr

    BegFunc NormalizeDatabaseName Type(*String) 
        DclSrParm DatabaseName Type(*String)

        DatabaseName = DatabaseName.Replace('/', '_').ToLower()
        DatabaseName = DatabaseName.Replace(' ', '_').ToLower()
        DatabaseName = DatabaseName.Replace('*public', 'public')

        LeaveSr DatabaseName
    EndFunc 

    BegFunc Mod Type( *Integer4 )  
        // Return the remainder of division.
        DclSrParm Dividend *Integer4 
        DclSrParm Divisor  *Integer4 

        DclFld Remainder *Integer4 

        System.Math.DivRem( Dividend, Divisor, *ByRef Remainder ) 

        Leavesr Value( Remainder ) 
    EndFunc
EndClass