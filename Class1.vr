Using System
Using System.Collections
Using System.Text
Using System.IO 
Using ASNA.DataGateHelper
Using CommandLineUtility 

BegClass Program
    BegEnum ExitCode Access(*Public) 
        DclEnumFld Success Value(0) 
        DclEnumFld Failure Value(1) 
    EndEnum 

    BegFunc Main Type(*Integer4) Shared(*Yes) Access(*Public) Attributes(System.STAThread())
        DclSrParm args Type(*String) Rank(1)
       
        DclFld Result Type(*Integer4) 

        Result = CodeRunner(args) 

        LeaveSr Result 
    EndFunc 
            
    BegFunc CodeRunner Type(*Integer4) Shared(*Yes) Access(*Public)
        DclSrParm args Type(*String) Rank(1)

        DclFld Export Type(Exporter)
        DclFld ElapsedMilliseconds Type(*Integer4)  
        DclFld CurrentForeGroundColor Type(ConsoleColor) 

        CurrentForeGroundColor = Console.ForegroundColor

        DclFld exportArgs Type(ExporterArgs) New()
        DclFld cam Type(CmdArgManager) 
        DclFld result Type(CmdArgManager.ExitCode) 

        cam = *New CmdArgManager(exportArgs, args, "Export a DataGate file to CSV")
        
        result = cam.ParseArgs()

        // This causes lots of grief. 
        // https://docs.microsoft.com/en-us/cpp/c-language/parsing-c-command-line-arguments?view=msvc-160
        // "A double quote mark preceded by a backslash (\") is interpreted as a literal double quote mark (").
        // Which causes an argument ending with \" and all other argument to get all jacked up! 
        // And you can't fix it. 

        If NOT Directory.Exists(exportArgs.OutputDirectory) 
            Console.WriteLine("Ouput path does not exist: {0}", exportArgs.OutputDirectory) 
            Console.WriteLine("This usually means that the output path ends with a double quote preceded by a backslash (\"").")
            Console.WriteLine("Omit the path's trailing '\' and try again.") 
            LeaveSr ExitCode.Failure
        EndIf 

        If     (result = CmdArgManager.ExitCode.HelpShown)
            LeaveSr ExitCode.Success
        ElseIf (result <> CmdArgManager.ExitCode.Success)
            Console.WriteLine('**ERROR**') 
            Console.WriteLine(cam.ErrorMessage) 
            LeaveSr ExitCode.Failure
        EndIf 

        export = *New Exporter(exportargs)

        Try
            elapsedmilliseconds = export.run()
            console.foregroundcolor = consolecolor.green
            console.writeline('time to export: {0:#,###}ms {1:#,##0}min', elapsedmilliseconds, elapsedmilliseconds / 60000)
            console.foregroundcolor = currentforegroundcolor

            If exportArgs.Pause
                Console.WriteLine('Press any key to continue...') 
                Console.ReadKey()
            EndIf 

            LeaveSr ExitCode.Success
        Catch ex Type(System.Exception)
            Console.ForegroundColor = ConsoleColor.Red
            Console.WriteLine(ex.Message) 
            Console.ForegroundColor = CurrentForeGroundColor
            LeaveSr ExitCode.Failure
        EndTry      
    EndFunc
EndClass

BegClass Exporter Access(*Public) 
    DclDB DGDB 
    DclFld ExportArgs Type(ExporterArgs) 
    DclFld OriginalForeGroundColor Type(ConsoleColor) 

    DclFld dgfr Type(DGFileReader) WithEvents(*Yes) 
    
    BegConstructor Access(*Public) 
        DclSrParm ExportArgs Type(ExporterArgs) 

        *This.ExportArgs = ExportArgs

        *This.OriginalForegroundColor = Console.ForegroundColor

        ExportArgs.TransformExportArgs()
    EndConstructor 

    BegSr RestoreForegroundColor 
        Console.ForegroundColor = *This.OriginalForeGroundColor
    EndSr
    
    BegFunc Run Access(*Public) Type(*Integer4)  
        DclFld TimeNow Type(DateTime) 

        DGDB.DBName = *This.ExportArgs.DatabaseName 
        Connect DGDB 

        *This.dgfr = *New DGFileReader(DGDB, 500)

        *This.dgfr.ReadEntireFile(*This.ExportArgs.LibraryName, *This.ExportArgs.Filename) 
        *This.ExportArgs.outfileStream.Close()
        *This.ExportArgs.outfileStream.Dispose()

        TimeNow = DateTime.Now()

        Console.ForegroundColor = ConsoleColor.Green

        Console.WriteLine(String.Format('Exported {0}\{1}\{2}', +
                    *This.ExportArgs.DatabaseName, +
                    *This.ExportArgs.LibraryName, +
                    *This.ExportArgs.FileName))
        Console.WriteLine('{0} created on {1}.', *This.ExportArgs.OutputFileName, TimeNow.ToString('f')) 
        Console.WriteLine('{0:#,000} rows written.', dgfr.TotalRowsCounter)
        RestoreForegroundColor()

        Disconnect DGDB

        LeaveSr dgfr.ReadMilliseconds    
    EndFunc 

    BegSr OnAfterRowRead Event(dgfr.AfterRowRead) 
        DclSrParm Sender Type(*Object)
        DclSrParm e Type(AfterRowReadArgs) 

        // Properties passed in through the e parameter:
        //   e.DataRow -- a System.Data.DataRow representing the row read.
        //   e.FieldNames -- an array of field names in the DataRow.
        //   e.FieldTypes -- an array of field types in the DataRow.
        //   e.CurrentRowCounter -- The current row number. 
        //   e.TotalRowsCounter -- the total row numbers. 

        DclFld ExportLine Type(StringBuilder) New()
        DclFld Counter Type(*Integer4) 

        Console.ForegroundColor = ConsoleColor.Green

        // Create schema file and export headings. 
        If e.CurrentRowCounter = 1
            // This seems like a silly place to do this, but if you do it earlier 
            // a spurious output file is written if the library or file is not found. 
            *This.ExportArgs.outfileStream = *New System.IO.StreamWriter(*This.ExportArgs.OutputFileName)

            If *This.ExportArgs.WriteSchemaFileFlag
                WriteSchemaFile(e.FieldNames, e.FieldTypes)
            EndIf 
            If *This.ExportArgs.IncludeHeadingFlag
                WriteColumnHeadings(e.FieldNames)
            EndIf 
        EndIf 

        // Export row data. 
        Counter = 0 
        ForEach FieldName Type(*String) Collection(e.FieldNames)
            If e.FieldTypes[Counter].ToLower() = 'string' 
                ExportLine.Append(String.Format('"{0}"{1}', e.DataRow[FieldName].ToString().Trim(), *This.ExportArgs.Delimiter))
            Else
                ExportLine.Append(String.Format("{0}{1}", e.DataRow[FieldName].ToString(), *This.ExportArgs.Delimiter))
            EndIf 
            Counter += 1
        EndFor 

        // Show Progress.             
        If *This.ExportArgs.ShowProgressFlag AND Utils.Mod(e.CurrentRowCounter, 500)            
            ShowProgress(e.CurrentRowCounter, e.TotalRowsCounter)
        EndIf

        *This.ExportArgs.outfileStream.WriteLine(Utils.RemoveLastCharacter(ExportLine.ToString())) 

        RestoreForegroundColor()
    EndSr

    BegSr WriteColumnHeadings
        DclSrParm FieldNames Type(*String) Rank(1) 

        DclFld ExportLine Type(StringBuilder) New()
        
        ForEach FieldName Type(*String) Collection(FieldNames)
            ExportLine.Append(String.Format('{0}{1}', FieldName, *This.ExportArgs.Delimiter))
        EndFor         
        ExportLine = ExportLine.Remove(ExportLine.Length - 1, 1)
        *This.ExportArgs.outfileStream.WriteLine(ExportLine)
    EndSr 

    BegSr ShowProgress
        DclSrParm CurrentRowCounter Type(*Integer4) 
        DclSrParm TotalRowsCounter Type(*Integer8) 

        DclFld CursorLeft Type(*Integer4) 
        DclFld CursorTop Type(*Integer4) 

        CursorLeft = Console.CursorLeft
        CursorTop = Console.CursorTop
        Console.WriteLine('{0} of {1}', CurrentRowCounter, TotalRowsCounter) 
        Console.CursorLeft = CursorLeft
        Console.CursorTop = CursorTop                        
    EndSr

    BegSr WriteSchemaFile
        DclSrParm FieldNames Type(*String) Rank(1) 
        DclSrParm FieldTypes Type(*String) Rank(1) 

        DclFld outfileStream Type(System.IO.StreamWriter)
        DclFld ColumnCounter Type(*Integer4) 
        
        outfileStream = *New System.IO.StreamWriter(*This.ExportArgs.outputSchemaFileName)
        outfileStream.WriteLine('{0,-24}{1}', 'Column name', 'Data type') 
        outfileStream.WriteLine('{0,-24}{1}', '-----------', '---------') 
        ForEach FieldName Type(*String) Collection(FieldNames)
            outfileStream.WriteLine(String.Format('{0,-24}{1}', FieldName, FieldTypes[ColumnCounter]))
            ColumnCounter += 1 
        EndFor         

        outfileStream.Dispose()
    EndSr
EndClass

BegClass ExporterArgs Access(*Public) 

    DclProp DatabaseName Type(*String) Access(*Public) +
                         Attributes(CmdArg("--databasename", "-d", *True,  "Database Name"))

    DclProp LibraryName Type(*String)  Access(*Public) +
                         Attributes(CmdArg("--library", "-l", *True, "Library name (or *LIBL if using a library list)"))

    DclProp FileName  Type(*String) Access(*Public) +
                         Attributes(CmdArg("--file", "-f", *True, "File name"))

    DclProp OutputDirectory Type(*String)  Access(*Public) +
                         Attributes(CmdArg("--outputpath", "-p", *False, "Output path--defaults to current user's Documents path"))

    DclProp IncludeHeadingFlag Type(*Boolean)  Access(*Public) +
                          Attributes(CmdArg("--noheadings", "-nh", *False, "Do not include first row with field names"))

    DclProp ShowProgressFlag Type(*Boolean)  Access(*Public) +
                          Attributes(CmdArg("--showprogress", "-sp", *False, "Show export progress"))

    DclProp TabDelimiterFlag Type(*Boolean)  Access(*Public) +
                          Attributes(CmdArg("--tabdelimiter", "-t", *False, "Use tab as field delimiter"))

    DclProp WriteSchemaFileFlag Type(*Boolean)  Access(*Public) +
                          Attributes(CmdArg("--writeschemafile", "-s", *False, "Write schema file"))

    DclProp Pause Type(*Boolean)  Access(*Public) +
                          Attributes(CmdArg("--pause", "-ps", *False, "Pause screen after export--usually for debugging purposes"))


    BegConstructor Access(*Public) 
        *This.OutputDirectory = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments)
        *This.IncludeHeadingFlag = *False 
        *This.TabDelimiterFlag = *False
        *This.ShowProgressFlag = *False
        *This.WriteSchemaFileFlag = *False
        *This.Pause = *False
    EndConstructor 

    DclProp LibraryNameForOutputFile Type(*String) Access(*Public) 
    DclProp OutputFileName Type(*String) Access(*Public) 
    DclProp OutputSchemaFileName Type(*String) Access(*Public) 
    DclProp Delimiter Type(*String) Access(*Public) 

    DclProp outfileStream Type(System.IO.StreamWriter) Access(*Public) 

    BegSr TransformExportArgs Access(*Public) 
        DclConst TAB Value(U'0009')
        DclConst COMMA Value(',') 

        If *This.OutputDirectory.EndsWith("/") OR +
           *This.OutputDirectory.EndsWith("\") 
           *This.OutputDirectory = Utils.RemoveLastCharacter(*This.OutputDirectory) 
        EndIf 
        
        If *This.TabDelimiterFlag 
            *This.Delimiter = TAB 
        Else
            *This.Delimiter = COMMA
        EndIf 
       
        If *This.LibraryName = '\' OR *This.LibraryName = '/'
            *This.LibraryNameForOutputFile = '#root'
        Else
            *This.LibraryNameForOutputFile = *This.LibraryName 
        EndIf 

        *This.OutputFileName = String.Format('{0}\{1}_{2}_{3}.txt', +
                                  *This.OutputDirectory, +
                                  Utils.NormalizeDatabaseName(*This.DatabaseName), +
                                  *This.LibraryNameForOutputFile, +
                                  *This.FileName)

        *This.OutputSchemaFileName = String.Format('{0}\{1}_{2}_{3}.schema.txt', +
                                     *This.OutputDirectory, +
                                     Utils.NormalizeDatabaseName(*This.DatabaseName), +
                                     *This.LibraryNameForOutputFile, +
                                     *This.FileName)
    EndSr 



EndClass




