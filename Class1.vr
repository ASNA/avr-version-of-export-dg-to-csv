Using System
Using System.Collections
Using System.Text
Using System.IO 
Using ASNA.DataGateHelper

BegClass Program
    BegEnum ExitCode Access(*Public) 
        DclEnumFld Success Value(0) 
        DclEnumFld Failure Value(1) 
    EndEnum 

    DclFld Pause Type(*Boolean) Shared(*Yes)

    // this is a comment
    BegFunc Main Type(*Integer4) Shared(*Yes) Access(*Public) Attributes(System.STAThread())
        DclSrParm args Type(*String) Rank(1)


        DclFld Result Type(*Integer4) 

        Result = CodeRunner(args) 

        If Pause
            Console.WriteLine('Press any key to continue...') 
            Console.ReadKey()
        EndIf 

        LeaveSr Result 
    EndFunc 
            
    BegFunc CodeRunner Type(*Integer4) Shared(*Yes) Access(*Public)
        DclSrParm args Type(*String) Rank(1)

        DclFld Export Type(Exporter)
        DclFld exportArgs Type(ExporterArgs) New()
        DclFld ElapsedMilliseconds Type(*Integer4)  
        DclFld CurrentForeGroundColor Type(ConsoleColor) 

        CurrentForeGroundColor = Console.ForegroundColor

        If args.Length < 3 OR Array.IndexOf(args, '-help') > -1
            ShowHelp()
            LeaveSr ExitCode.Failure
        EndIf 

        ExportArgs.DatabaseName = args[0]
        ExportArgs.LibraryName = args[1]
        ExportArgs.FileName = args[2]

        ExportArgs.OutputDirectory = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments)        
        // See if args[3] specifies an existing output directory. 
        If args.Length > 3 AND NOT args[3].StartsWith('-') 
            If args[3].EndsWith('\') 
                args[3] = Utils.RemoveLastCharacter(args[3])
            EndIf 
            If System.IO.Directory.Exists(args[3]) 
                ExportArgs.OutputDirectory = args[3]    
            Else 
                Console.ForegroundColor = ConsoleColor.Red
                Console.WriteLine('{0} output directory not found', args[3]) 
                Console.ForegroundColor = CurrentForeGroundColor
                LeaveSr ExitCode.Failure
            EndIf 
        EndIf 
        
        Pause = Array.IndexOf(args, '-pause') > -1

        ExportArgs.IncludeHeadingFlag = Array.IndexOf(args, '-noheadings') = -1
        ExportArgs.ShowProgressFlag = Array.IndexOf(args, '-showprogress') > -1
        ExportArgs.TabDelimiterFlag = Array.IndexOf(args, '-tabdelimiter') > -1
        ExportArgs.WriteSchemaFileFlag = Array.IndexOf(args, '-writeschemafile') > -1

        Export = *New Exporter(ExportArgs)

        Try
            ElapsedMilliseconds = Export.Run()
            Console.ForegroundColor = ConsoleColor.Green
            Console.WriteLine('Time to export: {0:#,###}ms {1:#,##0}min', ElapsedMilliseconds, ElapsedMilliseconds / 60000)
            Console.ForegroundColor = CurrentForeGroundColor
            LeaveSr ExitCode.Success
        Catch ex Type(System.Exception)
            Console.ForegroundColor = ConsoleColor.Red
            Console.WriteLine(ex.Message) 
            Console.ForegroundColor = CurrentForeGroundColor
            LeaveSr ExitCode.Failure
        EndTry      
    EndFunc

    BegSr ShowHelp Shared(*Yes) 
        DclFld CurrentForeGroundColor Type(ConsoleColor) 

        CurrentForeGroundColor = Console.ForegroundColor
        Console.ForegroundColor = ConsoleColor.Green
        Console.WriteLine('Export a DataGate file to either a comma- or tab-separated file.')
        Console.WriteLine('')
        Console.WriteLine('Usage:')
        Console.WriteLine('   exporttocsv <databaseName> <library> <file> <outputPath> -noheadings -showprogress -tabdelimiter -writeschemafile')
        Console.WriteLine('')
        Console.WriteLine('Required arguments--must be provided in the order shown')
        Console.WriteLine('    <databaseName>......ASNA Database Name. If the name includes blanks surround it with double quotes.')
        Console.WriteLine('    <library>...........Library name.')
        Console.WriteLine('    <file>..............File name.')
        Console.WriteLine('')
        Console.WriteLine('Optional arguments')
        Console.WriteLine('    <outputPath>........Path to which output files are written. If provided, this must be the fourth') 
        Console.WriteLine('                        argument. The default output path is the current user''s ''Documents'' folder.')
        Console.WriteLine('')
        Console.WriteLine('Optional flags--flags can be provided in any order')
        Console.WriteLine('    -help...............Show this help.')
        Console.WriteLine('    -noheadings.........Do not include field names as first row.')
        Console.WriteLine('    -showprogress.......Show progress as records are exported.')
        Console.WriteLine('    -tabdelimiter.......Delimit fields with a tab character instead of a comma.')
        Console.WriteLine('    -writeschemafile....Write schema file which shows column data types.')
        Console.WriteLine('')
        Console.WriteLine('Output file is written to the target folder in the format:')
        Console.WriteLine('    <databaseName>-<library>-<file>.txt')
        Console.WriteLine('')
        Console.WriteLine('Schema file is written to the target folder in the format:')
        Console.WriteLine('    <databaseName>-<library>-<file>.schema.txt')
        Console.WriteLine('')
        Console.WriteLine('In the output file, the Database Name has any special characters removed to make it work as part of a Windows filename.')  
        Console.WriteLine('For example, "*PUBLIC/DG Net Local" gets translated to "public_dg_net_local" in the output file name.')

        Console.ForegroundColor = CurrentForeGroundColor
    EndSr 
EndClass

BegClass Exporter Access(*Public) 
    DclDB DGDB 
    DclFld ExportArgs Type(ExporterArgs) 
    DclFld OriginalForeGroundColor Type(ConsoleColor) 

    DclFld dgfr Type(DGFileReader) WithEvents(*Yes) 
    
    BegConstructor Access(*Public) 
        DclSrParm ExportArgs Type(ExporterArgs) 

        *This.ExportArgs = ExportArgs

        *This.OriginalForegroundColor = Console.ForegroundColor

        ExportArgs.TransformExportArgs()
    EndConstructor 

    BegSr RestoreForegroundColor 
        Console.ForegroundColor = *This.OriginalForeGroundColor
    EndSr
    
    BegFunc Run Access(*Public) Type(*Integer4)  
        DclFld TimeNow Type(DateTime) 

        DGDB.DBName = *This.ExportArgs.DatabaseName 
        Connect DGDB 

        *This.dgfr = *New DGFileReader(DGDB, 500)

        *This.dgfr.ReadEntireFile(*This.ExportArgs.LibraryName, *This.ExportArgs.Filename) 
        *This.ExportArgs.outfileStream.Close()
        *This.ExportArgs.outfileStream.Dispose()

        TimeNow = DateTime.Now()

        Console.ForegroundColor = ConsoleColor.Green

        Console.WriteLine(String.Format('Exported {0}\{1}\{2}', +
                    *This.ExportArgs.DatabaseName, +
                    *This.ExportArgs.LibraryName, +
                    *This.ExportArgs.FileName))
        Console.WriteLine('{0} created on {1}.', *This.ExportArgs.OutputFileName, TimeNow.ToString('f')) 
        Console.WriteLine('{0:#,000} rows written.', dgfr.TotalRowsCounter)
        RestoreForegroundColor()

        Disconnect DGDB

        LeaveSr dgfr.ReadMilliseconds    
    EndFunc 

    BegSr OnAfterRowRead Event(dgfr.AfterRowRead) 
        DclSrParm Sender Type(*Object)
        DclSrParm e Type(AfterRowReadArgs) 

        // Properties passed in through the e parameter:
        //   e.DataRow -- a System.Data.DataRow representing the row read.
        //   e.FieldNames -- an array of field names in the DataRow.
        //   e.FieldTypes -- an array of field types in the DataRow.
        //   e.CurrentRowCounter -- The current row number. 
        //   e.TotalRowsCounter -- the total row numbers. 

        DclFld ExportLine Type(StringBuilder) New()
        DclFld Counter Type(*Integer4) 

        Console.ForegroundColor = ConsoleColor.Green

        DclFld FieldType Type(*String)


        Counter = 0 
        If e.CurrentRowCounter = 1
            ForEach FieldName Type(*String) Collection(e.FieldNames)
                    FieldType = e.FieldTypes[Counter].ToString()    
                    Console.WriteLine("Field {0} is type {1}", FieldName, FieldType)
                    Counter +=1 
            EndFor
        EndIf 


        // Create schema file and export headings. 
        If e.CurrentRowCounter = 1
            // This seems like a silly place to do this, but if you do it earlier 
            // a spurious output file is written if a library or file is not found. 
            *This.ExportArgs.outfileStream = *New System.IO.StreamWriter(*This.ExportArgs.OutputFileName)

            If *This.ExportArgs.WriteSchemaFileFlag
                WriteSchemaFile(e.FieldNames, e.FieldTypes)
            EndIf 
            If *This.ExportArgs.IncludeHeadingFlag
                WriteColumnHeadings(e.FieldNames)
            EndIf 
        EndIf 

        // Export row data. 
        Counter = 0 
        ForEach FieldName Type(*String) Collection(e.FieldNames)
            If e.FieldTypes[Counter].ToLower() = 'string' 
                ExportLine.Append(String.Format('"{0}"{1}', e.DataRow[FieldName].ToString().Trim(), *This.ExportArgs.Delimiter))
            Else
                ExportLine.Append(String.Format("{0}{1}", e.DataRow[FieldName].ToString(), *This.ExportArgs.Delimiter))
            EndIf 
            Counter += 1
        EndFor 

        // Show Progress.             
        If *This.ExportArgs.ShowProgressFlag AND Utils.Mod(e.CurrentRowCounter, 500)            
            ShowProgress(e.CurrentRowCounter, e.TotalRowsCounter)
        EndIf

        *This.ExportArgs.outfileStream.WriteLine(Utils.RemoveLastCharacter(ExportLine.ToString())) 

        RestoreForegroundColor()
    EndSr

    BegSr WriteColumnHeadings
        DclSrParm FieldNames Type(*String) Rank(1) 

        DclFld ExportLine Type(StringBuilder) New()
        
        ForEach FieldName Type(*String) Collection(FieldNames)
            ExportLine.Append(String.Format('{0}{1}', FieldName, *This.ExportArgs.Delimiter))
        EndFor         
        ExportLine = ExportLine.Remove(ExportLine.Length - 1, 1)
        *This.ExportArgs.outfileStream.WriteLine(ExportLine)
    EndSr 

    BegSr ShowProgress
        DclSrParm CurrentRowCounter Type(*Integer4) 
        DclSrParm TotalRowsCounter Type(*Integer8) 

        DclFld CursorLeft Type(*Integer4) 
        DclFld CursorTop Type(*Integer4) 

        CursorLeft = Console.CursorLeft
        CursorTop = Console.CursorTop
        Console.WriteLine('{0} of {1}', CurrentRowCounter, TotalRowsCounter) 
        Console.CursorLeft = CursorLeft
        Console.CursorTop = CursorTop                        
    EndSr

    BegSr WriteSchemaFile
        DclSrParm FieldNames Type(*String) Rank(1) 
        DclSrParm FieldTypes Type(*String) Rank(1) 

        DclFld outfileStream Type(System.IO.StreamWriter)
        DclFld ColumnCounter Type(*Integer4) 
        
        outfileStream = *New System.IO.StreamWriter(*This.ExportArgs.outputSchemaFileName)
        outfileStream.WriteLine('{0,-24}{1}', 'Column name', 'Data type') 
        outfileStream.WriteLine('{0,-24}{1}', '-----------', '---------') 
        ForEach FieldName Type(*String) Collection(FieldNames)
            outfileStream.WriteLine(String.Format('{0,-24}{1}', FieldName, FieldTypes[ColumnCounter]))
            ColumnCounter += 1 
        EndFor         

        outfileStream.Dispose()
    EndSr
EndClass

BegClass ExporterArgs Access(*Public)
    DclProp DatabaseName Type(*String) Access(*Public)
    DclProp LibraryName Type(*String)  Access(*Public)
    DclProp FileName  Type(*String) Access(*Public)
    DclProp OutputDirectory Type(*String)  Access(*Public)
    DclProp IncludeHeadingFlag Type(*Boolean)  Access(*Public)
    DclProp ShowProgressFlag Type(*Boolean)  Access(*Public)
    DclProp TabDelimiterFlag Type(*Boolean)  Access(*Public)
    DclProp WriteSchemaFileFlag Type(*Boolean)  Access(*Public)
    DclProp LibraryNameForOutputFile Type(*String) Access(*Public) 
    DclProp OutputFileName Type(*String) Access(*Public) 
    DclProp OutputSchemaFileName Type(*String) Access(*Public) 
    DclProp Delimiter Type(*String) Access(*Public) 
    DclProp outfileStream Type(System.IO.StreamWriter) Access(*Public) 

    BegSr TransformExportArgs Access(*Public) 
        DclConst TAB Value(U'0009')
        DclConst COMMA Value(',') 
        
        If *This.TabDelimiterFlag 
            *This.Delimiter = TAB 
        Else
            *This.Delimiter = COMMA
        EndIf 
       
        If *This.LibraryName = '\' OR *This.LibraryName = '/'
            *This.LibraryNameForOutputFile = '#root'
        Else
            *This.LibraryNameForOutputFile = *This.LibraryName 
        EndIf 

        *This.OutputFileName = String.Format('{0}\{1}_{2}_{3}.txt', +
                                  *This.OutputDirectory, +
                                  Utils.NormalizeDatabaseName(*This.DatabaseName), +
                                  *This.LibraryNameForOutputFile, +
                                  *This.FileName)

        *This.OutputSchemaFileName = String.Format('{0}\{1}_{2}_{3}.schema.txt', +
                                     *This.OutputDirectory, +
                                     Utils.NormalizeDatabaseName(*This.DatabaseName), +
                                     *This.LibraryNameForOutputFile, +
                                     *This.FileName)
    EndSr 


EndClass

